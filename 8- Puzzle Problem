import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, action=None, cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost

    def __lt__(self, other):
        return self.cost < other.cost

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(str(self.state))

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def actions(state):
    i, j = get_blank_position(state)
    possible_actions = []
    if i > 0:
        possible_actions.append((-1, 0))
    if i < 2:
        possible_actions.append((1, 0))
    if j > 0:
        possible_actions.append((0, -1))
    if j < 2:
        possible_actions.append((0, 1))
    return possible_actions

def apply_action(state, action):
    i, j = get_blank_position(state)
    di, dj = action
    new_state = [row[:] for row in state]
    new_state[i][j], new_state[i+di][j+dj] = new_state[i+di][j+dj], new_state[i][j]
    return new_state

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                row, col = divmod(state[i][j] - 1, 3)
                distance += abs(i - row) + abs(j - col)
    return distance

def solve_puzzle(initial_state, goal_state):
    frontier = []
    visited = set()
    heapq.heappush(frontier, PuzzleNode(initial_state, None, None, 0))

    while frontier:
        node = heapq.heappop(frontier)
        if node.state == goal_state:
            path = []
            while node.parent:
                path.append(node.state)
                node = node.parent
            path.append(node.state)
            return path[::-1]
        visited.add(node)
        for action in actions(node.state):
            child_state = apply_action(node.state, action)
            child_node = PuzzleNode(child_state, node, action, node.cost + 1 + manhattan_distance(child_state))
            if child_node not in visited:
                heapq.heappush(frontier, child_node)

# Taking initial and goal states from the user
initial_state = []
goal_state = []

print("Enter the initial state (3x3 matrix):")
for _ in range(3):
    row = list(map(int, input().split()))
    initial_state.append(row)

print("Enter the goal state (3x3 matrix):")
for _ in range(3):
    row = list(map(int, input().split()))
    goal_state.append(row)

solution = solve_puzzle(initial_state, goal_state)
if solution:
    print("Solution found in", len(solution) - 1, "steps:")
    for step, state in enumerate(solution):
        print("Step", step, ":")
        for row in state:
            print(row)
        print()
else:
    print("No solution found.")
